
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 01 00:01:44 CDT 2015
//----------------------------------------------------

package analizadorsintactico;

import java_cup.runtime.*;
import java.io.FileReader;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 01 00:01:44 CDT 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {
  static boolean error=false;
  /** Default constructor. */
  public AnalizadorSintactico(String dir) {super();
  try {
            error=false;
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(dir)));
            Object result = asin.parse().value;
            if(error==false){
                JOptionPane.showMessageDialog(null, "SINTAXIS CORRECTA","CORRECTO",JOptionPane.INFORMATION_MESSAGE);    
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\014\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\005\003\000\002\006\005" +
    "\000\002\007\010\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\003\000\002" +
    "\012\005\000\002\012\002\000\002\013\003\000\002\013" +
    "\002\000\002\014\003\000\002\014\003\000\002\014\002" +
    "\000\002\015\010\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\005\000\002\017\002\000\002\020\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\022\011" +
    "\000\002\023\005\000\002\024\003\000\002\025\007\000" +
    "\002\026\012\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\011\004\001\002\000\004\034\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\012\011\001\002\000\006\012\uffff\014\uffff\001" +
    "\002\000\004\040\013\001\002\000\004\015\017\001\002" +
    "\000\004\010\014\001\002\000\004\041\ufffd\001\002\000" +
    "\004\041\016\001\002\000\006\002\ufffe\015\ufffe\001\002" +
    "\000\012\017\117\020\115\021\116\022\112\001\002\000" +
    "\014\004\030\011\uffef\023\033\025\027\026\021\001\002" +
    "\000\014\004\041\005\036\006\042\007\035\010\040\001" +
    "\002\000\014\004\030\023\033\025\027\026\021\034\uffef" +
    "\001\002\000\014\004\030\023\033\025\027\026\021\034" +
    "\uffef\001\002\000\004\031\066\001\002\000\016\011\ufff0" +
    "\013\ufff0\024\ufff0\027\ufff0\030\ufff0\034\ufff0\001\002\000" +
    "\004\011\062\001\002\000\004\037\055\001\002\000\010" +
    "\031\ufff6\035\ufff6\036\ufff6\001\002\000\016\011\ufff1\013" +
    "\ufff1\024\ufff1\027\ufff1\030\ufff1\034\ufff1\001\002\000\014" +
    "\004\030\023\033\025\027\026\021\034\uffef\001\002\000" +
    "\014\004\041\005\036\006\042\007\035\010\040\001\002" +
    "\000\004\032\051\001\002\000\024\004\uffea\023\uffea\025" +
    "\uffea\026\uffea\032\uffea\033\uffea\034\uffea\036\uffea\037\uffea" +
    "\001\002\000\024\004\uffec\023\uffec\025\uffec\026\uffec\032" +
    "\uffec\033\uffec\034\uffec\036\uffec\037\uffec\001\002\000\004" +
    "\037\043\001\002\000\024\004\uffe9\023\uffe9\025\uffe9\026" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037\uffe9\001\002" +
    "\000\024\004\uffed\023\uffed\025\uffed\026\uffed\032\uffed\033" +
    "\uffed\034\uffed\036\uffed\037\uffed\001\002\000\024\004\uffeb" +
    "\023\uffeb\025\uffeb\026\uffeb\032\uffeb\033\uffeb\034\uffeb\036" +
    "\uffeb\037\uffeb\001\002\000\014\004\030\023\033\024\uffef" +
    "\025\027\026\021\001\002\000\004\024\045\001\002\000" +
    "\014\004\030\023\033\025\027\026\021\034\uffef\001\002" +
    "\000\004\034\047\001\002\000\014\004\uffe2\023\uffe2\025" +
    "\uffe2\026\uffe2\034\uffe2\001\002\000\014\004\041\005\036" +
    "\006\042\007\035\010\040\001\002\000\014\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\001\002\000\016\004\uffe1" +
    "\023\uffe1\025\uffe1\026\uffe1\034\uffe1\037\uffe1\001\002\000" +
    "\004\034\054\001\002\000\016\011\uffe3\013\uffe3\024\uffe3" +
    "\027\uffe3\030\uffe3\034\uffe3\001\002\000\016\004\uffdd\013" +
    "\uffdd\023\uffdd\025\uffdd\026\uffdd\030\uffdd\001\002\000\014" +
    "\004\030\013\uffef\023\033\025\027\026\021\001\002\000" +
    "\004\013\060\001\002\000\014\004\041\005\036\006\042" +
    "\007\035\010\040\001\002\000\014\004\uffdf\023\uffdf\025" +
    "\uffdf\026\uffdf\034\uffdf\001\002\000\004\034\010\001\002" +
    "\000\004\014\064\001\002\000\004\040\013\001\002\000" +
    "\004\002\001\001\002\000\014\004\041\005\036\006\042" +
    "\007\035\010\040\001\002\000\006\033\071\036\uffe7\001" +
    "\002\000\014\004\041\005\036\006\042\007\035\010\040" +
    "\001\002\000\014\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\001\002\000\004\036\073\001\002\000\026\004\030" +
    "\011\uffef\013\uffef\023\033\024\uffef\025\027\026\021\027" +
    "\uffef\030\uffef\034\uffef\001\002\000\016\011\uffee\013\uffee" +
    "\024\uffee\027\uffee\030\uffee\034\uffee\001\002\000\006\033" +
    "\071\036\uffe7\001\002\000\004\036\uffe8\001\002\000\004" +
    "\034\100\001\002\000\016\011\uffe5\013\uffe5\024\uffe5\027" +
    "\uffe5\030\uffe5\034\uffe5\001\002\000\004\034\102\001\002" +
    "\000\016\011\uffe4\013\uffe4\024\uffe4\027\uffe4\030\uffe4\034" +
    "\uffe4\001\002\000\004\037\104\001\002\000\014\004\030" +
    "\023\033\025\027\026\021\027\uffef\001\002\000\004\027" +
    "\106\001\002\000\004\037\055\001\002\000\014\004\030" +
    "\023\033\025\027\026\021\030\uffef\001\002\000\004\030" +
    "\111\001\002\000\014\004\uffde\023\uffde\025\uffde\026\uffde" +
    "\034\uffde\001\002\000\004\037\ufff9\001\002\000\004\016" +
    "\131\001\002\000\004\037\120\001\002\000\004\037\ufff7" +
    "\001\002\000\004\037\ufff8\001\002\000\004\037\ufffa\001" +
    "\002\000\004\004\030\001\002\000\006\035\123\036\ufff4" +
    "\001\002\000\004\036\126\001\002\000\004\004\030\001" +
    "\002\000\006\035\123\036\ufff4\001\002\000\004\036\ufff5" +
    "\001\002\000\014\016\ufff2\017\117\020\115\021\116\022" +
    "\112\001\002\000\004\016\ufffb\001\002\000\004\016\ufff3" +
    "\001\002\000\014\004\ufffc\011\ufffc\023\ufffc\025\ufffc\026" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\004\006" +
    "\017\001\001\000\004\005\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\112\010" +
    "\113\001\001\000\020\011\023\014\025\015\030\021\024" +
    "\022\022\025\021\026\031\001\001\000\006\016\033\023" +
    "\102\001\001\000\020\011\023\014\100\015\030\021\024" +
    "\022\022\025\021\026\031\001\001\000\020\011\023\014" +
    "\076\015\030\021\024\022\022\025\021\026\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\023\014\052\015\030\021\024\022\022\025" +
    "\021\026\031\001\001\000\006\016\033\023\036\001\001" +
    "\000\004\024\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\023\014\043\015\030\021" +
    "\024\022\022\025\021\026\031\001\001\000\002\001\001" +
    "\000\020\011\023\014\045\015\030\021\024\022\022\025" +
    "\021\026\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\023\014\056\015\030\021\024\022\022\025" +
    "\021\026\031\001\001\000\002\001\001\000\006\016\033" +
    "\023\060\001\001\000\002\001\001\000\004\003\062\001" +
    "\001\000\002\001\001\000\004\004\064\001\001\000\002" +
    "\001\001\000\004\016\066\001\001\000\006\017\071\020" +
    "\067\001\001\000\004\016\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\023\014\073\015\030\021" +
    "\024\022\022\025\021\026\031\001\001\000\002\001\001" +
    "\000\006\017\075\020\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\023\014\104\015" +
    "\030\021\024\022\022\025\021\026\031\001\001\000\002" +
    "\001\001\000\004\027\106\001\001\000\020\011\023\014" +
    "\107\015\030\021\024\022\022\025\021\026\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\120\001\001\000" +
    "\004\012\121\001\001\000\002\001\001\000\004\011\123" +
    "\001\001\000\004\012\124\001\001\000\002\001\001\000" +
    "\010\007\127\010\113\013\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

    public boolean getError(){
        return error;
    }
    public void syntax_error(Symbol st){
      token t=(token)st.value;
      report_error("Error Sintactico:"+ t.getValor()+"- "+t.getX()+"-"+t.getY(),null);
      error=true;
    }
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        JOptionPane.showMessageDialog(null, m,"ERROR",JOptionPane.ERROR_MESSAGE);
        
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dpt ::= NONDOSPUNTOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dpt",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iff ::= NONIF condicion NONDOSPUNTOS terbody NONELSE dpt terbody NONENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("iff",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // terrepeat ::= NONREPEAT dpt terbody NONUNTIL condicion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terrepeat",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // teror ::= NONREL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("teror",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= terid2 teror terid2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // whil ::= NONWHILE condicion NONDOSPUNTOS terbody NONENDWHILE terbody NONPUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("whil",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estatuto ::= iff terbody NONPUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estatuto",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estatuto ::= terrepeat terbody NONPUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estatuto",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estatuto ::= whil terbody NONPUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estatuto",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // teroa ::= NONARIT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("teroa",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termid ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termid",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termid ::= teroa terid2 termid 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termid",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // terid2 ::= NONSTRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terid2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // terid2 ::= NONREALCIENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terid2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // terid2 ::= NONREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terid2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // terid2 ::= NONENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terid2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // terid2 ::= NONIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terid2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // teroperacion ::= terid NONIGUAL terid2 termid NONPUNTOYCOMA terbody 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("teroperacion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // terbody ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terbody",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // terbody ::= estatuto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terbody",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // terbody ::= teroperacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terbody",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // otro ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("otro",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // otro ::= terdef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("otro",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mas ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mas ::= NONCOMA terid mas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // terid ::= NONIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terid",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= NONCHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= NONFLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= NONBOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= NONINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // terdef ::= tipo NONDOSPUNTOS terid mas NONPUNTOYCOMA otro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terdef",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // terident ::= NONIDENT terdef NONENDIDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("terident",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tertext ::= NONSTRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tertext",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nom ::= NONPARABRE tertext NONPARCIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("nom",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pto ::= NONPUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("pto",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= NONEFE pto NONOPEN nom terident terbody NONEFE pto NONCLOS nom 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

