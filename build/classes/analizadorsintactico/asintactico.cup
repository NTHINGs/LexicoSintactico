 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package analizadorsintactico;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import javax.swing.JOptionPane;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    static boolean error=false;

    public boolean getError(){
        return error;
    }
    public void syntax_error(Symbol st){
      token t=(token)st.value;
      report_error("Error Sintactico:"+ t.getValor()+"- "+t.getX()+"-"+t.getY(),null);
      error=true;
    }
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        JOptionPane.showMessageDialog(null, m,"ERROR",JOptionPane.ERROR_MESSAGE);
        
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***"+result);
            if(error==false){
                JOptionPane.showMessageDialog(null, "SINTAXIS CORRECTA","CORRECTO",JOptionPane.INFORMATION_MESSAGE);    
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los NONenteros son listados en la segunda o demas lineas. */
terminal           NONIDENTIFICADOR,NONENTERO,NONREAL,NONREALCIENT,NONSTRING,NONEFE,NONOPEN,NONUNTIL,NONCLOS,NONIDENT,NONENDIDENT,NONINT,NONCHAR,NONFLOAT,NONBOOLEAN,NONWHILE,NONENDWHILE,NONREPEAT,NONIF,NONELSE,NONENDIF,NONIGUAL,NONREL,NONARIT,NONPUNTO,NONCOMA,NONPUNTOYCOMA,NONDOSPUNTOS,NONPARABRE,NONPARCIERRA;
   
/* No terminales usados en la seccion gramatical. */
non terminal       program,pto,nom,tertext,terident,terdef,tipo,terid,mas,otro,terbody,teroperacion,terid2,termid,teroa,estatuto,whil,condicion,teror,terrepeat,iff,dpt;
   
//Grámatica
    program ::= NONEFE pto NONOPEN nom terident terbody NONEFE pto NONCLOS nom;

    pto ::=NONPUNTO;

    nom ::= NONPARABRE tertext NONPARCIERRA;

    tertext ::= NONSTRING;

    terident ::= NONIDENT terdef NONENDIDENT;

    terdef ::= tipo NONDOSPUNTOS terid mas NONPUNTOYCOMA otro;

    tipo ::= NONINT | NONBOOLEAN | NONFLOAT | NONCHAR;

    terid ::= NONIDENTIFICADOR;

    mas ::= NONCOMA terid mas |;

    otro ::= terdef |;

    terbody ::= teroperacion | estatuto |;

    teroperacion ::= terid NONIGUAL terid2 termid NONPUNTOYCOMA terbody;

    terid2 ::= NONIDENTIFICADOR | NONENTERO | NONREAL | NONREALCIENT | NONSTRING;

    termid ::= teroa terid2 termid |;

    teroa ::= NONARIT;

    estatuto ::= whil terbody NONPUNTO | terrepeat terbody NONPUNTO | iff terbody NONPUNTO;

    whil ::= NONWHILE condicion NONDOSPUNTOS terbody NONENDWHILE terbody NONPUNTO;

    condicion ::= terid2 teror terid2;

    teror ::= NONREL;

    terrepeat ::= NONREPEAT dpt terbody NONUNTIL condicion;

    iff ::= NONIF condicion NONDOSPUNTOS terbody NONELSE dpt terbody NONENDIF;

    dpt ::= NONDOSPUNTOS;